// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/gemini.ts
import { GoogleGenAI } from "@google/genai";
var ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY || "" });
async function searchPlacesWithAI(location, category, userQuery) {
  try {
    const searchQuery = userQuery ? `${category} in ${location} ${userQuery}` : `best ${category} in ${location}`;
    const prompt = `Use web search to find current, real ${searchQuery}. I need authentic, up-to-date information about actual places that exist in ${location}.
    
    Search the web for the top 6 real ${category} in ${location} and provide:
    - Actual business names (not generic names)
    - Verified addresses that exist
    - Real ratings from review sites
    - Current operating hours and status
    - Accurate pricing information
    - Authentic descriptions from their websites or reviews
    - High-quality images of each place (exterior, interior, or food photos)
    
    IMPORTANT: Only include places that actually exist and are currently operating. Use current web search results to verify all information and find actual photos.
    
    Format the response as a JSON array of objects with these exact fields:
    {
      "name": string,
      "category": string,
      "rating": number,
      "distance": string,
      "price": string,
      "description": string,
      "openNow": boolean,
      "address": string,
      "phone": string,
      "website": string,
      "imageUrl": string
    }
    
    Only return valid, real places with accurate information. Use current data and prioritize highly-rated, popular establishments.`;
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "array",
          items: {
            type: "object",
            properties: {
              name: { type: "string" },
              category: { type: "string" },
              rating: { type: "number" },
              distance: { type: "string" },
              price: { type: "string" },
              description: { type: "string" },
              openNow: { type: "boolean" },
              address: { type: "string" },
              phone: { type: "string" },
              website: { type: "string" },
              imageUrl: { type: "string" }
            },
            required: ["name", "category", "rating", "distance", "price", "description", "openNow", "address", "imageUrl"]
          }
        }
      },
      contents: prompt
    });
    const places = JSON.parse(response.text || "[]");
    return places;
  } catch (error) {
    console.error("Error searching places with AI:", error);
    throw new Error("Failed to search places with AI");
  }
}
async function chatWithTravelBuddy(userMessage, userLocation, context) {
  try {
    const systemPrompt = `You are Travel Buddy, a friendly AI travel assistant with the personality of a wise, adventurous koala. You help users discover amazing places to visit.

    IMPORTANT: Use web search to find current, real information about places and travel recommendations. Only provide information about places that actually exist and are currently operating.

    Your personality:
    - Friendly and enthusiastic about travel
    - Knowledgeable about different locations using current web search
    - Helpful in providing travel recommendations with verified information
    - Use emojis occasionally but don't overdo it
    - Keep responses conversational and engaging

    Current user location: ${userLocation || "Not specified"}
    Context: ${context || "General travel chat"}

    When recommending places, always verify through web search that they:
    - Actually exist with real addresses
    - Are currently operating
    - Have authentic reviews and ratings
    - Provide accurate contact information and hours

    Respond naturally to the user's message with verified, current information.`;
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        systemInstruction: systemPrompt,
        temperature: 0.7
      },
      contents: userMessage
    });
    return {
      text: response.text || "I'm having trouble responding right now. Please try again!"
    };
  } catch (error) {
    console.error("Error in Travel Buddy chat:", error);
    return {
      text: "Sorry, I'm having some technical difficulties. Please try again later! \u{1F428}"
    };
  }
}
async function getLocationInfo(locationName) {
  try {
    const prompt = `Provide information about the location: "${locationName}"
    
    Include:
    - A brief description of the location
    - Approximate coordinates (latitude and longitude)
    - Any notable features or characteristics
    
    Format as JSON:
    {
      "name": string,
      "description": string,
      "coordinates": { "lat": number, "lng": number }
    }`;
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          properties: {
            name: { type: "string" },
            description: { type: "string" },
            coordinates: {
              type: "object",
              properties: {
                lat: { type: "number" },
                lng: { type: "number" }
              }
            }
          }
        }
      },
      contents: prompt
    });
    return JSON.parse(response.text || "{}");
  } catch (error) {
    console.error("Error getting location info:", error);
    throw new Error("Failed to get location information");
  }
}

// server/routes.ts
async function registerRoutes(app2) {
  app2.get("/api/places", async (req, res) => {
    try {
      const { location, category, query } = req.query;
      if (!location || !category) {
        return res.status(400).json({
          error: "Location and category are required"
        });
      }
      const places = await searchPlacesWithAI(
        location,
        category,
        query
      );
      res.json(places);
    } catch (error) {
      console.error("Error fetching places:", error);
      res.status(500).json({
        error: "Failed to fetch places"
      });
    }
  });
  app2.post("/api/chat", async (req, res) => {
    try {
      const { message, location, context } = req.body;
      if (!message) {
        return res.status(400).json({
          error: "Message is required"
        });
      }
      const response = await chatWithTravelBuddy(
        message,
        location,
        context
      );
      res.json(response);
    } catch (error) {
      console.error("Error in chat:", error);
      res.status(500).json({
        error: "Failed to process chat message"
      });
    }
  });
  app2.get("/api/location/:name", async (req, res) => {
    try {
      const { name } = req.params;
      const locationInfo = await getLocationInfo(name);
      res.json(locationInfo);
    } catch (error) {
      console.error("Error getting location info:", error);
      res.status(500).json({
        error: "Failed to get location information"
      });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();